- name: Auto Preset
  config:
    model: gpt-3.5-turbo-16k
    streaming: true
    systemMessage: You are my unit testing assistant, you will help write unit tests
      for the files I provide, your reply will only include the code, nothing
      more.
    promptTemplate: |-
      Please provide unit tests for the file {fileName} using {techs}
      {instructions}

      Here is the file content:
      ```{content}```
    instructions: Only respond with the code directly, don't include any additional
      information. don't use markdown or any other formatting.
    techs:
    autoTechs: true
    examples:
      - fileName: greetings.js
        code: >-
          function sayHello() {
            return 'Hello';
          }

          function sayOhayo() {
            return 'Ohayo';
          }

          function sayGoodbye() {
            return 'Goodbye';
          }

          function saySomething(thing) {
            return thing;
          }

          module.exports = {
            sayHello,
            sayOhayo,
            sayGoodbye,
            saySomething,
          };
        tests: >-
          const { sayHello, sayOhayo, sayGoodbye, saySomething } = require('./greetings');

          test('should say Hello', () => {
            expect(sayHello()).toBe('Hello');
          });

          test('should say Ohayo', () => {
            expect(sayOhayo()).toBe('Ohayo');
          });

          test('should say Goodbye', () => {
            expect(sayGoodbye()).toBe('Goodbye');
          });

          test('should say something', () => {
            expect(saySomething('Apple')).toBe('Apple');
          });
      - fileName: greetings.py
        code: |-
          def say_hello():
              return 'Hello'

          def say_ohayo():
              return 'Ohayo'

          def say_goodbye():
              return 'Goodbye'

          def say_something(thing):
              return thing
        tests: |-
          from greetings import say_hello, say_ohayo, say_goodbye, say_something

          def test_say_hello():
              assert say_hello() == 'Hello'

          def test_say_ohayo():
              assert say_ohayo() == 'Ohayo'

          def test_say_goodbye():
              assert say_goodbye() == 'Goodbye'

          def test_say_something():
              assert say_something('Apple') == 'Apple'
- name: React & Jest
  config:
    model: gpt-3.5-turbo-16k
    streaming: true
    systemMessage: You are my unit testing assistant, you will help write unit tests
      for the files I provide, your reply will only include the code, nothing
      more.
    promptTemplate: |-
      Please provide unit tests for the file {fileName} using {techs}
      {instructions}

      Here is the file content:
      ```{content}```
    instructions: Follow best practices. Follow my guidelines. Only respond with the code.
    techs: []
    examples:
      - fileName: Header.tsx
        code: |-
          import React from 'react';

          interface HeaderProps {
            title: string;
            subtitle: string;
          }

          const Header: React.FC<HeaderProps> = ({ title, subtitle }) => {
            return (
              <div className="header">
                <h1>{title}</h1>
                <h2>{subtitle}</h2>
              </div>
            );
          };

          export default Header;
        tests: |-
          import React from 'react';
          import { render } from '@testing-library/react';
          import Header from './Header';

          test('renders title and subtitle', () => {
            const { getByText } = render(<Header title="My Title" subtitle="My Subtitle" />);

            const titleElement = getByText(/My Title/i);
            const subtitleElement = getByText(/My Subtitle/i);

            expect(titleElement).toBeInTheDocument();
            expect(subtitleElement).toBeInTheDocument();
          });
      - fileName: Dropdown.tsx
        code: >-
          import React, { useState } from 'react';

          interface DropdownProps {
            options: string[];
            defaultOption: string;
          }

          const Dropdown: React.FC<DropdownProps> = ({ options, defaultOption }) => {
            const [selectedOption, setSelectedOption] = useState<string>(defaultOption);

            const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
              setSelectedOption(e.target.value);
            };

            return (
              <select className="dropdown" value={selectedOption} onChange={handleChange}>
                {options.map((option, index) => (
                  <option key={index} value={option}>
                    {option}
                  </option>
                ))}
              </select>
            );
          };

          export default Dropdown;
        tests: >-
          import React from 'react';
          import { render, fireEvent } from '@testing-library/react';
          import Dropdown from './Dropdown';

          test('renders options and handles selection', () => {
            const options = ['Apple', 'Banana', 'Cherry'];
            const defaultOption = 'Apple';
            
            const { getByDisplayValue } = render(
              <Dropdown options={options} defaultOption={defaultOption} />
            );

            // Check initial default value
            expect(getByDisplayValue(defaultOption)).toBeInTheDocument();

            // Change selection and verify
            const dropdown = getByDisplayValue(defaultOption) as HTMLSelectElement;
            fireEvent.change(dropdown, { target: { value: 'Banana' } });
            
            expect(getByDisplayValue('Banana')).toBeInTheDocument();
          });
